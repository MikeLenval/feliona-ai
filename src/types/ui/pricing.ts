/**
 * ============================================
 * UI Pricing Types
 * üí∞ Pricing and subscription types –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ PricingSection
 * ============================================
 */

// === BASIC PRICING TYPES ===
export type PlanType = 'free' | 'premium' | 'intimate' | 'enterprise';
export type Currency = 'USD' | 'EUR' | 'RUB';
export type BillingPeriod = 'month' | 'year' | 'forever';
export type ButtonVariant = 'primary' | 'secondary' | 'glass' | 'pricing' | 'adult';

// === PRICING STRUCTURES ===

/**
 * –ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ü–µ–Ω–æ–π
 */
export interface PlanPrice {
  readonly amount: number;
  readonly currency: Currency;
  readonly period: BillingPeriod;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∞
 */
export interface PlanFeature {
  readonly text: string;
  readonly included: boolean;
  readonly highlight: boolean;
  readonly adult: boolean;
}

/**
 * –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
 */
export interface PlanMetadata {
  readonly planType: PlanType;
  readonly popular: boolean;
  readonly highlight: boolean;
  readonly adult?: boolean;
  readonly badge?: string;
}

/**
 * –ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
 */
export interface PricingPlan {
  readonly id: PlanType;
  readonly name: string;
  readonly description: string;
  readonly price: PlanPrice;
  readonly buttonText: string;
  readonly popular: boolean;
  readonly highlight: boolean;
  readonly limitations: readonly string[];
  readonly features: readonly PlanFeature[];
}

// === COMPONENT PROPS ===

/**
 * Props –¥–ª—è FeatureItem
 */
export interface FeatureItemProps {
  readonly feature: PlanFeature;
}

/**
 * Props –¥–ª—è PricingCard
 */
export interface PricingCardProps {
  readonly plan: PricingPlan;
  readonly isHovered: boolean;
  readonly animationDelay: string;
  readonly onHover: (planId: PlanType | null) => void;
  readonly onSelect: (planId: PlanType) => void;
}

/**
 * Props –¥–ª—è PricingSection
 */
export interface PricingSectionProps {
  readonly onPlanSelect?: (planId: PlanType) => void;
  readonly currentPlan?: PlanType;
  readonly className?: string;
}

// === STATE AND UTILITIES ===

/**
 * –ü–ª–∞–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º UI
 */
export interface PlanWithState extends PricingPlan {
  readonly isCurrent: boolean;
  readonly isHovered: boolean;
}

/**
 * –°–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
export interface PricingAnalyticsEvent {
  readonly event: string;
  readonly planId: PlanType;
  readonly category: string;
  readonly additionalData?: Record<string, unknown>;
}

/**
 * –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π pricing
 */
export type PricingEventName = 
  | 'plan_card_hover'
  | 'plan_card_click'
  | 'plan_selected'
  | 'pricing_section_view'
  | 'pricing_section_scroll'
  | 'feature_click';

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ UI –¥–ª—è pricing
 */
export interface PricingUIState {
  readonly hoveredPlan: PlanType | null;
  readonly selectedPlan: PlanType | null;
  readonly isLoading: boolean;
  readonly error?: string;
}

/**
 * –°–µ–ª–µ–∫—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤
 */
export interface PlanSelector {
  readonly planId: PlanType;
  readonly isSelected: boolean;
  readonly onClick: (planId: PlanType) => void;
}

/**
 * –§–∏–ª—å—Ç—Ä –ø–ª–∞–Ω–æ–≤
 */
export interface PlanFilter {
  readonly adultContent: boolean;
  readonly priceRange: [number, number];
  readonly features: readonly string[];
}

/**
 * –ö–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤
 */
export interface PlanComparator {
  readonly planIds: readonly PlanType[];
  readonly compareBy: 'price' | 'features' | 'popularity';
}

// === LEGACY TYPES (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PricingPlan
 */
export interface Subscription {
  readonly id: string;
  readonly userId: string;
  readonly planType: PlanType;
  readonly status: 'active' | 'cancelled' | 'expired';
  readonly currentPeriodStart: Date;
  readonly currentPeriodEnd: Date;
  readonly cancelAtPeriodEnd: boolean;
}

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UsageLimits –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
 */
export interface UsageLimits {
  readonly messagesPerDay: number;
  readonly companionsLimit: number;
  readonly memoryRetention: 'session' | 'limited' | 'extended';
  readonly advancedFeatures: boolean;
}
