/**
 * ============================================
 * UI Character Types
 * üé≠ Character display and interaction types –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Characters.tsx
 * ============================================
 */

import type { CompanionId } from '../base';
import type { CompanionType } from '../core/companions';
import type { EmotionType } from '../core/emotions';

// === TYPES –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –í CHARACTERS COMPONENT ===

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Characters
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–µ CHARACTERS_CONFIG
 */
export interface CharacterForComponent {
  readonly id: CompanionId;
  readonly name: string;
  readonly type: CompanionType;
  readonly description: string;
  readonly personality: Readonly<{
    traits: readonly string[];
    values: readonly string[];
    communication_style: 'formal' | 'casual' | 'playful' | 'intellectual' | 'emotional' | 'mysterious';
    emotional_intelligence: number;
    empathy_level: number;
  }>;
  readonly appearance: Readonly<{
    avatar_url: string;
    style: 'anime' | 'realistic' | 'artistic' | 'minimalist' | 'fantasy';
    primary_colors: readonly string[];
  }>;
  readonly capabilities: Readonly<{
    conversation: boolean;
    voice_synthesis: boolean;
    emotional_response: boolean;
    memory_formation: boolean;
  }>;
  readonly metadata: Readonly<{
    category: 'sfw' | 'nsfw';
    age_rating: 'teen' | 'adult';
    default_emotion: EmotionType;
    fantasy_race?: 'elf' | 'neko' | 'angel' | 'demon';
    adult_content?: boolean;
  }>;
}

/**
 * –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
 */
export type FilterCategory = 'all' | 'realistic' | 'fantasy' | 'sfw' | 'nsfw';

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
 */
export interface CharacterFilterState {
  readonly category: FilterCategory;
  readonly searchQuery: string;
}

/**
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export interface FilterCounts {
  readonly all: number;
  readonly realistic: number;
  readonly fantasy: number;
  readonly sfw: number;
  readonly nsfw: number;
}

/**
 * –õ–µ–π–±–ª—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 */
export interface FilterLabels {
  readonly all: string;
  readonly realistic: string;
  readonly fantasy: string;
  readonly sfw: string;
  readonly nsfw: string;
}

// === COMPONENT PROPS ===

/**
 * Props –¥–ª—è CharacterCard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export interface CharacterCardProps {
  readonly character: CharacterForComponent;
  readonly isHovered: boolean;
  readonly animationDelay: string;
  readonly onHover: (characterId: CompanionId | null) => void;
  readonly onSelect: (character: CharacterForComponent) => void;
}

/**
 * Props –¥–ª—è FilterButton –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export interface FilterButtonProps {
  readonly filter: FilterCategory;
  readonly isActive: boolean;
  readonly count: number;
  readonly onClick: (category: FilterCategory) => void;
}

/**
 * Props –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ Characters –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
export interface CharactersProps {
  readonly onCharacterSelect?: (character: CharacterForComponent) => void;
  readonly className?: string;
}

// === HANDLER TYPES ===

export type CharacterHoverHandler = (characterId: CompanionId | null) => void;
export type CharacterSelectHandler = (character: CharacterForComponent) => void;
export type FilterChangeHandler = (category: FilterCategory) => void;

// === ANALYTICS ===

export type CharacterAnalyticsTracker = (
  eventName: string, 
  characterId: string, 
  characterType: string
) => void;

// === APPEARANCE STYLES ===

export type AppearanceStyle = 'anime' | 'realistic' | 'artistic' | 'minimalist' | 'fantasy';

// === CARD VARIANTS ===

export type CardVariant = 'glass' | 'adult';

// === ANIMATION CONFIG ===

export interface CharactersAnimationConfig {
  readonly staggerMs: number;
  readonly emotionInterval: number;
}

// === CONSTANTS ===

export const CHARACTER_FILTER_LABELS: FilterLabels = {
  all: 'All',
  realistic: 'Realistic', 
  fantasy: 'Fantasy',
  sfw: 'Safe',
  nsfw: '18+ Only'
} as const;

// === TYPE GUARDS ===

export function isFilterCategory(value: unknown): value is FilterCategory {
  return typeof value === 'string' && 
    ['all', 'realistic', 'fantasy', 'sfw', 'nsfw'].includes(value);
}

export function isAppearanceStyle(value: unknown): value is AppearanceStyle {
  return typeof value === 'string' && 
    ['anime', 'realistic', 'artistic', 'minimalist', 'fantasy'].includes(value);
}

export function isFantasyRace(value: unknown): value is 'elf' | 'neko' | 'angel' | 'demon' {
  return typeof value === 'string' && 
    ['elf', 'neko', 'angel', 'demon'].includes(value);
}

// === LEGACY CHARACTER DISPLAY (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===

export interface CharacterDisplayProps {
  readonly id: CompanionId;
  readonly type: CompanionType;
  readonly emotion: EmotionType;
  readonly size?: 'small' | 'medium' | 'large';
  readonly interactive?: boolean;
}

export interface CharacterAvatar {
  readonly url: string;
  readonly alt: string;
  readonly fallback?: string;
}

export interface CharacterGalleryItem {
  readonly id: CompanionId;
  readonly name: string;
  readonly avatar: CharacterAvatar;
  readonly type: CompanionType;
  readonly description: string;
  readonly featured?: boolean;
}
